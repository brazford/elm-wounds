var _user$project$AbilityView$drawSlide = F5(
	function (x, y, squareSize, color, ability) {
		var longLength = (squareSize / 3) | 0;
		var shortLength = (squareSize / 5) | 0;
		var thick = (squareSize / 10) | 0;
		var thin = (squareSize / 20) | 0;
		var drawConditionally = ability.demoted ? A2(
			_elm_lang$svg$Svg$line,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$stroke(color),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$strokeWidth(
						_elm_lang$core$Basics$toString(thin)),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$x1(
							_elm_lang$core$Basics$toString(x)),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$x2(
								_elm_lang$core$Basics$toString(x + (shortLength * ability.xOffset))),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$y1(
									_elm_lang$core$Basics$toString(y)),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$y2(
										_elm_lang$core$Basics$toString(y + (shortLength * ability.yOffset))),
									_1: {ctor: '[]'}
								}
							}
						}
					}
				}
			},
			{ctor: '[]'}) : A2(
			_elm_lang$svg$Svg$g,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$line,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$stroke(color),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$strokeWidth(
								_elm_lang$core$Basics$toString(thick)),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$x1(
									_elm_lang$core$Basics$toString(x)),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$x2(
										_elm_lang$core$Basics$toString(x + (shortLength * ability.xOffset))),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$y1(
											_elm_lang$core$Basics$toString(y)),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$y2(
												_elm_lang$core$Basics$toString(y + (shortLength * ability.yOffset))),
											_1: {ctor: '[]'}
										}
									}
								}
							}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$line,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$stroke(color),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$strokeWidth(
									_elm_lang$core$Basics$toString(thin)),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$x1(
										_elm_lang$core$Basics$toString(x)),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$x2(
											_elm_lang$core$Basics$toString(x + (longLength * ability.xOffset))),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$y1(
												_elm_lang$core$Basics$toString(y)),
											_1: {
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$y2(
													_elm_lang$core$Basics$toString(y + (longLength * ability.yOffset))),
												_1: {ctor: '[]'}
											}
										}
									}
								}
							}
						},
						{ctor: '[]'}),
					_1: {ctor: '[]'}
				}
			});
		return drawConditionally;
	});
var _user$project$AbilityView$drawFat = F5(
	function (x, y, squareSize, color, ability) {
		var shortLength = (squareSize / 5) | 0;
		var getStrokeThickness = ability.demoted ? ((squareSize / 20) | 0) : ((squareSize / 10) | 0);
		return A2(
			_elm_lang$svg$Svg$line,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$stroke(color),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$strokeWidth(
						_elm_lang$core$Basics$toString(getStrokeThickness)),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$x1(
							_elm_lang$core$Basics$toString(x)),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$x2(
								_elm_lang$core$Basics$toString(x + (shortLength * ability.xOffset))),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$y1(
									_elm_lang$core$Basics$toString(y)),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$y2(
										_elm_lang$core$Basics$toString(y + (shortLength * ability.yOffset))),
									_1: {ctor: '[]'}
								}
							}
						}
					}
				}
			},
			{ctor: '[]'});
	});
var _user$project$AbilityView$drawJump = F5(
	function (x, y, squareSize, color, ability) {
		var shortLength = (squareSize / 5) | 0;
		var thin = (squareSize / 40) | 0;
		return A2(
			_elm_lang$svg$Svg$line,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$stroke(color),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$strokeWidth(
						_elm_lang$core$Basics$toString(thin)),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$x1(
							_elm_lang$core$Basics$toString(x)),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$x2(
								_elm_lang$core$Basics$toString(x + (shortLength * ability.xOffset))),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$y1(
									_elm_lang$core$Basics$toString(y)),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$y2(
										_elm_lang$core$Basics$toString(y + (shortLength * ability.yOffset))),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$strokeDasharray('2, 2'),
										_1: {ctor: '[]'}
									}
								}
							}
						}
					}
				}
			},
			{ctor: '[]'});
	});
var _user$project$AbilityView$drawStep = F5(
	function (x, y, squareSize, color, ability) {
		var shortLength = (squareSize / 5) | 0;
		var thin = (squareSize / 20) | 0;
		return A2(
			_elm_lang$svg$Svg$line,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$stroke(color),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$strokeWidth(
						_elm_lang$core$Basics$toString(thin)),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$x1(
							_elm_lang$core$Basics$toString(x)),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$x2(
								_elm_lang$core$Basics$toString(x + (shortLength * ability.xOffset))),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$y1(
									_elm_lang$core$Basics$toString(y)),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$y2(
										_elm_lang$core$Basics$toString(y + (shortLength * ability.yOffset))),
									_1: {ctor: '[]'}
								}
							}
						}
					}
				}
			},
			{ctor: '[]'});
	});
var _user$project$AbilityView$drawAbility = F5(
	function (x, y, squareSize, color, ability) {
		var _p0 = ability.abilityType;
		switch (_p0.ctor) {
			case 'Step':
				return A5(_user$project$AbilityView$drawStep, x, y, squareSize, color, ability);
			case 'Fat':
				return A5(_user$project$AbilityView$drawFat, x, y, squareSize, color, ability);
			case 'Jump':
				return A5(_user$project$AbilityView$drawJump, x, y, squareSize, color, ability);
			default:
				return A5(_user$project$AbilityView$drawSlide, x, y, squareSize, color, ability);
		}
	});
