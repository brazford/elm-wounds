var _user$project$Man$knightRook = function (player) {
	return {
		player: player,
		name: 'knightRook',
		abilities: {
			ctor: '::',
			_0: _user$project$Ability$slideNorth,
			_1: {
				ctor: '::',
				_0: _user$project$Ability$slideEast,
				_1: {
					ctor: '::',
					_0: _user$project$Ability$slideSouth,
					_1: {
						ctor: '::',
						_0: _user$project$Ability$slideWest,
						_1: {
							ctor: '::',
							_0: _user$project$Ability$jumpNorthNorthEast,
							_1: {
								ctor: '::',
								_0: _user$project$Ability$jumpEastNorthEast,
								_1: {
									ctor: '::',
									_0: _user$project$Ability$jumpEastSouthEast,
									_1: {
										ctor: '::',
										_0: _user$project$Ability$jumpSouthSouthEast,
										_1: {
											ctor: '::',
											_0: _user$project$Ability$jumpSouthSouthWest,
											_1: {
												ctor: '::',
												_0: _user$project$Ability$jumpWestSouthWest,
												_1: {
													ctor: '::',
													_0: _user$project$Ability$jumpWestNorthWest,
													_1: {
														ctor: '::',
														_0: _user$project$Ability$jumpNorthNorthWest,
														_1: {ctor: '[]'}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	};
};
var _user$project$Man$knightBishop = function (player) {
	return {
		player: player,
		name: 'knightBishop',
		abilities: {
			ctor: '::',
			_0: _user$project$Ability$slideNorthEast,
			_1: {
				ctor: '::',
				_0: _user$project$Ability$slideSouthEast,
				_1: {
					ctor: '::',
					_0: _user$project$Ability$slideSouthWest,
					_1: {
						ctor: '::',
						_0: _user$project$Ability$slideNorthWest,
						_1: {
							ctor: '::',
							_0: _user$project$Ability$jumpNorthNorthEast,
							_1: {
								ctor: '::',
								_0: _user$project$Ability$jumpEastNorthEast,
								_1: {
									ctor: '::',
									_0: _user$project$Ability$jumpEastSouthEast,
									_1: {
										ctor: '::',
										_0: _user$project$Ability$jumpSouthSouthEast,
										_1: {
											ctor: '::',
											_0: _user$project$Ability$jumpSouthSouthWest,
											_1: {
												ctor: '::',
												_0: _user$project$Ability$jumpWestSouthWest,
												_1: {
													ctor: '::',
													_0: _user$project$Ability$jumpWestNorthWest,
													_1: {
														ctor: '::',
														_0: _user$project$Ability$jumpNorthNorthWest,
														_1: {ctor: '[]'}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	};
};
var _user$project$Man$knight = function (player) {
	return {
		player: player,
		name: 'knight',
		abilities: {
			ctor: '::',
			_0: _user$project$Ability$jumpNorthNorthEast,
			_1: {
				ctor: '::',
				_0: _user$project$Ability$jumpEastNorthEast,
				_1: {
					ctor: '::',
					_0: _user$project$Ability$jumpEastSouthEast,
					_1: {
						ctor: '::',
						_0: _user$project$Ability$jumpSouthSouthEast,
						_1: {
							ctor: '::',
							_0: _user$project$Ability$jumpSouthSouthWest,
							_1: {
								ctor: '::',
								_0: _user$project$Ability$jumpWestSouthWest,
								_1: {
									ctor: '::',
									_0: _user$project$Ability$jumpWestNorthWest,
									_1: {
										ctor: '::',
										_0: _user$project$Ability$jumpNorthNorthWest,
										_1: {ctor: '[]'}
									}
								}
							}
						}
					}
				}
			}
		}
	};
};
var _user$project$Man$bishop = function (player) {
	return {
		player: player,
		name: 'bishop',
		abilities: {
			ctor: '::',
			_0: _user$project$Ability$slideNorthEast,
			_1: {
				ctor: '::',
				_0: _user$project$Ability$slideSouthEast,
				_1: {
					ctor: '::',
					_0: _user$project$Ability$slideSouthWest,
					_1: {
						ctor: '::',
						_0: _user$project$Ability$slideNorthWest,
						_1: {ctor: '[]'}
					}
				}
			}
		}
	};
};
var _user$project$Man$rook = function (player) {
	return {
		player: player,
		name: 'rook',
		abilities: {
			ctor: '::',
			_0: _user$project$Ability$slideNorth,
			_1: {
				ctor: '::',
				_0: _user$project$Ability$slideEast,
				_1: {
					ctor: '::',
					_0: _user$project$Ability$slideSouth,
					_1: {
						ctor: '::',
						_0: _user$project$Ability$slideWest,
						_1: {ctor: '[]'}
					}
				}
			}
		}
	};
};
var _user$project$Man$queen = function (player) {
	return {
		player: player,
		name: 'queen',
		abilities: {
			ctor: '::',
			_0: _user$project$Ability$slideNorth,
			_1: {
				ctor: '::',
				_0: _user$project$Ability$slideNorthEast,
				_1: {
					ctor: '::',
					_0: _user$project$Ability$slideEast,
					_1: {
						ctor: '::',
						_0: _user$project$Ability$slideSouthEast,
						_1: {
							ctor: '::',
							_0: _user$project$Ability$slideSouth,
							_1: {
								ctor: '::',
								_0: _user$project$Ability$slideSouthWest,
								_1: {
									ctor: '::',
									_0: _user$project$Ability$slideWest,
									_1: {
										ctor: '::',
										_0: _user$project$Ability$slideNorthWest,
										_1: {ctor: '[]'}
									}
								}
							}
						}
					}
				}
			}
		}
	};
};
var _user$project$Man$king = function (player) {
	return {
		player: player,
		name: 'king',
		abilities: {
			ctor: '::',
			_0: _user$project$Ability$fatNorth,
			_1: {
				ctor: '::',
				_0: _user$project$Ability$fatNorthEast,
				_1: {
					ctor: '::',
					_0: _user$project$Ability$fatEast,
					_1: {
						ctor: '::',
						_0: _user$project$Ability$fatSouthEast,
						_1: {
							ctor: '::',
							_0: _user$project$Ability$fatSouth,
							_1: {
								ctor: '::',
								_0: _user$project$Ability$fatSouthWest,
								_1: {
									ctor: '::',
									_0: _user$project$Ability$fatWest,
									_1: {
										ctor: '::',
										_0: _user$project$Ability$fatNorthWest,
										_1: {ctor: '[]'}
									}
								}
							}
						}
					}
				}
			}
		}
	};
};
var _user$project$Man$star = function (player) {
	return {
		player: player,
		name: 'star',
		abilities: {
			ctor: '::',
			_0: _user$project$Ability$stepNorth,
			_1: {
				ctor: '::',
				_0: _user$project$Ability$stepNorthEast,
				_1: {
					ctor: '::',
					_0: _user$project$Ability$stepEast,
					_1: {
						ctor: '::',
						_0: _user$project$Ability$stepSouthEast,
						_1: {
							ctor: '::',
							_0: _user$project$Ability$stepSouth,
							_1: {
								ctor: '::',
								_0: _user$project$Ability$stepSouthWest,
								_1: {
									ctor: '::',
									_0: _user$project$Ability$stepWest,
									_1: {
										ctor: '::',
										_0: _user$project$Ability$stepNorthWest,
										_1: {ctor: '[]'}
									}
								}
							}
						}
					}
				}
			}
		}
	};
};
var _user$project$Man$removeAbility = F2(
	function (man, abilityToRemove) {
		var nonMatchingAbilities = function (candidate) {
			return (!_elm_lang$core$Native_Utils.eq(abilityToRemove.xOffset, candidate.xOffset)) || (!_elm_lang$core$Native_Utils.eq(abilityToRemove.yOffset, candidate.yOffset));
		};
		return _elm_lang$core$Native_Utils.update(
			man,
			{
				abilities: A2(
					_elm_lang$core$List$filter,
					function (ability) {
						return nonMatchingAbilities(ability);
					},
					man.abilities)
			});
	});
var _user$project$Man$demoteAbility = F2(
	function (man, abilityToDemote) {
		var demoteMatchingAbilities = function (candidateAbility) {
			return (_elm_lang$core$Native_Utils.eq(candidateAbility.xOffset, abilityToDemote.xOffset) && _elm_lang$core$Native_Utils.eq(candidateAbility.yOffset, abilityToDemote.yOffset)) ? _elm_lang$core$Native_Utils.update(
				candidateAbility,
				{demoted: true}) : candidateAbility;
		};
		return _elm_lang$core$Native_Utils.update(
			man,
			{
				abilities: A2(
					_elm_lang$core$List$map,
					function (candidateAbility) {
						return demoteMatchingAbilities(candidateAbility);
					},
					man.abilities)
			});
	});
var _user$project$Man$getDefendingAbility = F2(
	function (defender, attackingAbility) {
		var abilityMatcher = function (defendingAbility) {
			return _elm_lang$core$Native_Utils.eq(defendingAbility.xOffset, 0 - attackingAbility.xOffset) && _elm_lang$core$Native_Utils.eq(defendingAbility.yOffset, 0 - attackingAbility.yOffset);
		};
		var _p0 = defender;
		if (_p0.ctor === 'Just') {
			return _elm_lang$core$List$head(
				A2(
					_elm_lang$core$List$filter,
					function (ability) {
						return abilityMatcher(ability);
					},
					_p0._0.abilities));
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	});
var _user$project$Man$hasDefendingAbility = F2(
	function (defender, attackingAbility) {
		var abilityMatcher = function (defendingAbility) {
			return _elm_lang$core$Native_Utils.eq(defendingAbility.xOffset, 0 - attackingAbility.xOffset) && _elm_lang$core$Native_Utils.eq(defendingAbility.yOffset, 0 - attackingAbility.yOffset);
		};
		var matches = A2(
			_elm_lang$core$List$filter,
			function (ability) {
				return abilityMatcher(ability);
			},
			defender.abilities);
		return _elm_lang$core$Native_Utils.cmp(
			_elm_lang$core$List$length(matches),
			0) > 0;
	});
var _user$project$Man$calculateValue = function (man) {
	var abilityValue = function (ability) {
		var _p1 = ability.abilityType;
		switch (_p1.ctor) {
			case 'Step':
				return 10;
			case 'Slide':
				return 50;
			case 'Jump':
				return 20;
			default:
				return 20;
		}
	};
	return _elm_lang$core$List$sum(
		A2(
			_elm_lang$core$List$map,
			function (ability) {
				return abilityValue(ability);
			},
			man.abilities));
};
var _user$project$Man$Man = F3(
	function (a, b, c) {
		return {abilities: a, name: b, player: c};
	});
